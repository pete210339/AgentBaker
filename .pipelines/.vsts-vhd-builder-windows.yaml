name: $(Date:yyyyMMdd)$(Rev:.r)_$(Build.SourceBranchName)_$(BuildID)
trigger: none

variables:
- group: ab-windows-ms-tenant

pool:
  name: $(AZURE_POOL_NAME)
      
parameters:
- name: build23h2containerd
  displayName: Build 23H2 containerd
  type: boolean
  default: True
- name: build2025containerd
  displayName: Build 2025 containerd
  type: boolean
  default: True
- name: deploycplatstudio
  displayName: Deploy CplatStudio
  type: boolean
  default: False
- name: vhddebug
  displayName: VHD Debug
  type: boolean
  default: False
- name: backfillresourcedeletion
  displayName: Perform Resource Backfill Deletion
  type: boolean
  default: False

# Use variable group "ab-windows-ame-tenant" and link it to the pipeline "AKS Windows VHD Build - PR check-in gate"
# Use variable group "ab-windows-ms-tenant" and link it to the pipeline "[TEST All VHDs] AKS Windows VHD Build - Msft Tenant"

stages:
  - stage: build_vhd_23h2_containerd
    dependsOn: []
    condition: eq('${{ parameters.build23h2containerd }}', True)
    jobs:
    - job: build
      timeoutInMinutes: 180
      steps:
        - bash: |
            echo '##vso[task.setvariable variable=DRY_RUN]True'
            echo '##vso[task.setvariable variable=BACKFILL_RESOURCE_DELETION]${{parameters.backfillresourcedeletion}}'
            echo '##vso[task.setvariable variable=VHD_DEBUG]${{parameters.vhddebug}}'
            echo '##vso[task.setvariable variable=HYPERV_GENERATION]V1'
            echo '##vso[task.setvariable variable=AZURE_VM_SIZE]Standard_D4s_v3'
            echo '##vso[task.setvariable variable=WINDOWS_SKU]23h2-containerd'
            echo '##vso[task.setvariable variable=WINDOWS_BASE_IMAGE_URL]$(WINDOWS_23H2_BASE_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_NANO_IMAGE_URL]$(WINDOWS_2022_NANO_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_CORE_IMAGE_URL]$(WINDOWS_2022_CORE_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_PRIVATE_PACKAGES_URL]$(PRIVATE_PACKAGES_URL)'
          displayName: Setup Build Variables
        - template: ./templates/.builder-release-template-windows.yaml
          parameters:
            artifactName: 23h2-containerd
  - stage: create_test_aks_cluster_23h2
    dependsOn: build_vhd_23h2_containerd
    jobs:
      - job: create
        timeoutInMinutes: 60
        steps:
          - powershell: |
              # login using service principal
              az login --service-principal --username $(AZURE_BUILD_CLIENT_ID) --password $(AZURE_BUILD_CLIENT_SECRET) --tenant $(AZURE_BUILD_TENANT_ID)
            displayName: Service Principal Login
          - powershell: |
              # set subscription account
              az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
            displayName: Set Subscription
          - powershell: |
              # create resource group
              az group create -n $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-23h2 -l $(AZURE_BUILD_LOCATION)
            displayName: Create Resource Group
          - powershell: |
              # create cluster
              az aks create `
              --resource-group $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-23h2 `
              --name $(AZURE_BUILD_RESOURCE_GROUP_NAME)-aks `
              --enable-addons monitoring `
              --network-plugin $(CLUSTER_NETWORK_TYPE) `
              --vm-set-type VirtualMachineScaleSets `
              --load-balancer-sku standard `
              --windows-admin-username azureuser `
              --windows-admin-password $(CLUSTER_PASSWORD) `
              --generate-ssh-keys 
            displayName: Create AKS Cluster
          - powershell: |
              # add windows node pool and set custom image to use from previous pipeline stage
              az aks nodepool add `
              --resource-group $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-23h2 `
              --cluster-name  $(AZURE_BUILD_RESOURCE_GROUP_NAME)-aks `
              --node-vm-size Standard_D8s_v3 `
              --node-osdisk-size 256 `
              --os-type Windows `
              --name npwin `
              --node-count 1  `
              --aks-custom-headers AKSHTTPCustomFeatures=Microsoft.ContainerService/UseCustomizedWindowsOSImage,WindowsOSImageSubscriptionID=$(AZURE_BUILD_SUBSCRIPTION_ID),WindowsOSImageResourceGroup=$(AZURE_BUILD_RESOURCE_GROUP_NAME),WindowsOSImageGallery=$(AZURE_BUILD_GALLERY_NAME),WindowsOSImageName=windows-23h2-containerd,WindowsOSImageVersion=$(SIG_IMAGE_VERSION)
            displayName: Add Windows Node Pool

  - stage: build_vhd_2025_containerd
    dependsOn: []
    condition: eq('${{ parameters.build2025containerd }}', True)
    jobs:
    - job: build
      timeoutInMinutes: 180
      steps:
        - bash: |
            echo '##vso[task.setvariable variable=DRY_RUN]True'
            echo '##vso[task.setvariable variable=BACKFILL_RESOURCE_DELETION]${{parameters.backfillresourcedeletion}}'
            echo '##vso[task.setvariable variable=VHD_DEBUG]${{parameters.vhddebug}}'
            echo '##vso[task.setvariable variable=HYPERV_GENERATION]V1'
            echo '##vso[task.setvariable variable=AZURE_VM_SIZE]Standard_D4s_v3'
            echo '##vso[task.setvariable variable=WINDOWS_SKU]2025-containerd'
            echo '##vso[task.setvariable variable=WINDOWS_BASE_IMAGE_URL]$(WINDOWS_2025_BASE_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_NANO_IMAGE_URL]$(WINDOWS_2025_NANO_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_CORE_IMAGE_URL]$(WINDOWS_2025_CORE_IMAGE_URL)'
            echo '##vso[task.setvariable variable=WINDOWS_PRIVATE_PACKAGES_URL]$(PRIVATE_PACKAGES_URL)'
          displayName: Setup Build Variables
        - template: ./templates/.builder-release-template-windows.yaml
          parameters:
            artifactName: 2025-containerd
  - stage: create_test_aks_cluster_2025
    dependsOn: build_vhd_2025_containerd
    jobs:
      - job: create
        timeoutInMinutes: 60
        steps:
          - powershell: |
              # login using service principal
              az login --service-principal --username $(AZURE_BUILD_CLIENT_ID) --password $(AZURE_BUILD_CLIENT_SECRET) --tenant $(AZURE_BUILD_TENANT_ID)
            displayName: Service Principal Login
          - powershell: |
              # set subscription account
              az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
            displayName: Set Subscription
          - powershell: |
              # create resource group
              az group create -n $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-2025 -l $(AZURE_BUILD_LOCATION)
            displayName: Create Resource Group
          - powershell: |
              # create cluster
              az aks create `
              --resource-group $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-2025  `
              --name $(AZURE_BUILD_RESOURCE_GROUP_NAME)-aks `
              --enable-addons monitoring `
              --network-plugin $(CLUSTER_NETWORK_TYPE) `
              --vm-set-type VirtualMachineScaleSets `
              --load-balancer-sku standard `
              --windows-admin-username azureuser `
              --windows-admin-password $(CLUSTER_PASSWORD) `
              --generate-ssh-keys 
            displayName: Create AKS Cluster
          - powershell: |
              # add windows node pool and set custom image to use from previous pipeline stage
              az aks nodepool add `
              --resource-group $(AZURE_BUILD_RESOURCE_GROUP_NAME)-$(SIG_IMAGE_VERSION)-2025 `
              --cluster-name  $(AZURE_BUILD_RESOURCE_GROUP_NAME)-aks `
              --node-vm-size Standard_D8s_v3 `
              --node-osdisk-size 256 `
              --os-type Windows `
              --name npwin `
              --node-count 1  `
              --aks-custom-headers AKSHTTPCustomFeatures=Microsoft.ContainerService/UseCustomizedWindowsOSImage,WindowsOSImageSubscriptionID=$(AZURE_BUILD_SUBSCRIPTION_ID),WindowsOSImageResourceGroup=$(AZURE_BUILD_RESOURCE_GROUP_NAME),WindowsOSImageGallery=$(AZURE_BUILD_GALLERY_NAME),WindowsOSImageName=windows-2025-containerd,WindowsOSImageVersion=$(SIG_IMAGE_VERSION)
            displayName: Add Windows Node Pool

  - stage: deploy_cplatstudio_23h2
    dependsOn: build_vhd_23h2_containerd
    condition: eq('${{ parameters.deploycplatstudio }}', True)
    jobs:
      - job: deploy
        timeoutInMinutes: 60
        pool:
          vmImage: ubuntu-latest
        steps:
          - powershell: |
              # login using service principal
              az login --service-principal --username $(AZURE_BUILD_CLIENT_ID) --password $(AZURE_BUILD_CLIENT_SECRET) --tenant $(AZURE_BUILD_TENANT_ID)
            displayName: Service Principal Login
          - powershell: |
              # set subscription account
              az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
            displayName: Set Subscription
          - powershell: |
              az extension add --name storage-preview --debug --yes
              
              az storage blob download `
                --container-name cplatstudio `
                --name cplatv12.zip `
                --account-name cirruscontainerplat `
                --sas-token '$(CPLATSTUDIO_URL)' `
                --file $(System.DefaultWorkingDirectory)/cplat.zip 
                
            displayName: download
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(System.DefaultWorkingDirectory)/cplat.zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/cplat'
          - bash: |
              # Your script execution commands in Bash
              cd $(System.DefaultWorkingDirectory)/cplat/cluster
              chmod +x deploy.sh
              ./deploy.sh $(CPLAT_RG)23h2 eastus2 $(CPLAT_CLUSTER_NAME) $(CPLAT_IDENTITY) $(AZURE_BUILD_SUBSCRIPTION_ID) $(AZURE_BUILD_RESOURCE_GROUP_NAME) windows-23h2-containerd $(SIG_IMAGE_VERSION) $(USER_OBJECT_ID)
            displayName: 'Run Script'

  - stage: deploy_cplatstudio_2025
    dependsOn: build_vhd_2025_containerd
    condition: eq('${{ parameters.deploycplatstudio }}', True)
    jobs:
      - job: deploy
        timeoutInMinutes: 60
        pool:
          vmImage: ubuntu-latest
        steps:
          - powershell: |
              # login using service principal
              az login --service-principal --username $(AZURE_BUILD_CLIENT_ID) --password $(AZURE_BUILD_CLIENT_SECRET) --tenant $(AZURE_BUILD_TENANT_ID)
            displayName: Service Principal Login
          - powershell: |
              # set subscription account
              az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
            displayName: Set Subscription
          - powershell: |
              az extension add --name storage-preview --debug --yes
              
              az storage blob download `
                --container-name cplatstudio `
                --name cplatv12.zip `
                --account-name cirruscontainerplat `
                --sas-token '$(CPLATSTUDIO_URL)' `
                --file $(System.DefaultWorkingDirectory)/cplat.zip 
                
            displayName: download
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(System.DefaultWorkingDirectory)/cplat.zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/cplat'
          - bash: |
              # Your script execution commands in Bash
              cd $(System.DefaultWorkingDirectory)/cplat/cluster
              chmod +x deploy.sh
              ./deploy.sh $(CPLAT_RG)2025 eastus2 $(CPLAT_CLUSTER_NAME) $(CPLAT_IDENTITY) $(AZURE_BUILD_SUBSCRIPTION_ID) $(AZURE_BUILD_RESOURCE_GROUP_NAME) windows-2025-containerd $(SIG_IMAGE_VERSION) $(USER_OBJECT_ID)
            displayName: 'Run Script'

  - stage: node_density_run_23h2
    dependsOn: []
    jobs:
      - job: deploy
        timeoutInMinutes: 60
        pool:
          vmImage: ubuntu-latest
        steps:
          - powershell: |
              # login using service principal
              az login --service-principal --username $(AZURE_BUILD_CLIENT_ID) --password $(AZURE_BUILD_CLIENT_SECRET) --tenant $(AZURE_BUILD_TENANT_ID)
            displayName: Service Principal Login
          - powershell: |
              # set subscription account
              az account set -s $(AZURE_BUILD_SUBSCRIPTION_ID)
            displayName: Set Subscription
          - powershell: |
              az extension add --name storage-preview --debug --yes
              
              az storage blob download `
                --container-name containerperf `
                --name containerperf.zip `
                --account-name cirruscontainerplat `
                --sas-token '$(NODE_DENSITY_TOKEN)' `
                --file $(System.DefaultWorkingDirectory)/containerperf.zip 
                
            displayName: download
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(System.DefaultWorkingDirectory)/containerperf.zip'
              destinationFolder: '$(System.DefaultWorkingDirectory)/containerperf'
          - bash: |
              # Your script execution commands in Bash
              cd $(System.DefaultWorkingDirectory)/containerperf/src/AKS/Utilities
              chmod +x createcluster.sh
              chmod +x addnodes.sh
              ./createcluster.sh azureuser $(CLUSTER_PASSWORD)
              ./addnodes.sh $(AZURE_BUILD_SUBSCRIPTION_ID) $(AZURE_BUILD_RESOURCE_GROUP_NAME) $(AZURE_BUILD_GALLERY_NAME) windows-23h2-containerd $(SIG_IMAGE_VERSION)
              cd $(System.DefaultWorkingDirectory)/containerperf/src/AKS/NodeDensity
              chmod +x runs.sh
              ./runs.sh
            displayName: 'Run Script'
            
  - stage: backfill_cleanup_outdated_resources
    dependsOn: []
    condition: always()
    jobs:
    - job: build
      timeoutInMinutes: 180
      steps:
        - bash: |
            echo '##vso[task.setvariable variable=DRY_RUN]True'
            echo '##vso[task.setvariable variable=BACKFILL_RESOURCE_DELETION]${{parameters.backfillresourcedeletion}}'
          displayName: Setup Build Variables
        - template: ./templates/.builder-release-template-windows-cleanup.yaml
